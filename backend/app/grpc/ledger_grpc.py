# ruff: noqa
# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: ledger.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client

if typing.TYPE_CHECKING:
    import grpclib.server

from google.protobuf import timestamp_pb2
from . import ledger_pb2


class LedgerServiceBase(abc.ABC):

    @abc.abstractmethod
    async def PostEntry(
        self,
        stream: "grpclib.server.Stream[ledger_pb2.PostEntryRequest, ledger_pb2.Transaction]",
    ) -> None:
        pass

    @abc.abstractmethod
    async def GetBalance(
        self,
        stream: "grpclib.server.Stream[ledger_pb2.GetBalanceRequest, ledger_pb2.Balance]",
    ) -> None:
        pass

    @abc.abstractmethod
    async def StreamTxns(
        self,
        stream: "grpclib.server.Stream[ledger_pb2.StreamTxnsRequest, ledger_pb2.Transaction]",
    ) -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            "/ledger.LedgerService/PostEntry": grpclib.const.Handler(
                self.PostEntry,
                grpclib.const.Cardinality.UNARY_UNARY,
                ledger_pb2.PostEntryRequest,
                ledger_pb2.Transaction,
            ),
            "/ledger.LedgerService/GetBalance": grpclib.const.Handler(
                self.GetBalance,
                grpclib.const.Cardinality.UNARY_UNARY,
                ledger_pb2.GetBalanceRequest,
                ledger_pb2.Balance,
            ),
            "/ledger.LedgerService/StreamTxns": grpclib.const.Handler(
                self.StreamTxns,
                grpclib.const.Cardinality.UNARY_STREAM,
                ledger_pb2.StreamTxnsRequest,
                ledger_pb2.Transaction,
            ),
        }


class LedgerServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.PostEntry = grpclib.client.UnaryUnaryMethod(
            channel,
            "/ledger.LedgerService/PostEntry",
            ledger_pb2.PostEntryRequest,
            ledger_pb2.Transaction,
        )
        self.GetBalance = grpclib.client.UnaryUnaryMethod(
            channel,
            "/ledger.LedgerService/GetBalance",
            ledger_pb2.GetBalanceRequest,
            ledger_pb2.Balance,
        )
        self.StreamTxns = grpclib.client.UnaryStreamMethod(
            channel,
            "/ledger.LedgerService/StreamTxns",
            ledger_pb2.StreamTxnsRequest,
            ledger_pb2.Transaction,
        )
